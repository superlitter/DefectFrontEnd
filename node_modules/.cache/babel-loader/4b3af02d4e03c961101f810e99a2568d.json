{"ast":null,"code":"import axios from 'axios';\nimport { Message } from \"element-ui\";\nimport router from \"../router\"; //请求拦截器 请求头中加入token\n\naxios.interceptors.request.use(config => {\n  //如果存在token，请求携带这个token\n  let JToken = sessionStorage.getItem(\"tokenStr\");\n\n  if (JToken) {\n    //如果token有值  就在请求头信息里添加一个教J-TOKEN的值\n    config.headers['J-TOKEN'] = JToken;\n  }\n\n  return config;\n}, error => {\n  console.log(error);\n}); //响应拦截器\n\naxios.interceptors.response.use(success => {\n  if (success.status == 200) {//Message.success({message: 'OK!'});\n  } else if (success.status == 201) {\n    Message.success({\n      message: 'Created!'\n    });\n  }\n\n  return success.data;\n}, error => {\n  if (error.response.code == 504 || error.response.code == 404) {\n    Message.error({\n      message: '服务器忙!'\n    });\n  } else if (error.message.code == 403) {\n    Message.error({\n      message: '权限不足，请联系管理员!'\n    });\n  } else if (error.message.code == 401) {\n    Message.error({\n      message: '尚未登录，请登录!'\n    });\n    sessionStorage.removeItem('Authorization'); //跳转到登陆页面\n\n    router.replace('/login');\n  } else {\n    Message.error({\n      message: '错误!'\n    });\n  }\n\n  return;\n}); // let base = `http://192.168.0.107:9090`;\n// let base = `http://192.168.205.231:9090`;\n\nlet base = `http://momoko46.azurewebsites.net`; //传送json格式的post请求\n\nexport const postRequest = (url, params) => {\n  return axios.post(`${base}${url}`, params);\n}; //传送json格式的get请求\n\nexport const getRequest = (url, params) => {\n  return axios.get(`${base}${url}`, params);\n}; //传送json格式的put请求\n\nexport const putRequest = (url, params) => {\n  return axios.put(`${base}${url}`, params);\n}; //传送json格式的delete请求\n\nexport const deleteRequest = (url, params) => {\n  return axios.delete(`${base}${url}`, params);\n};","map":{"version":3,"names":["axios","Message","router","interceptors","request","use","config","JToken","sessionStorage","getItem","headers","error","console","log","response","success","status","message","data","code","removeItem","replace","base","postRequest","url","params","post","getRequest","get","putRequest","put","deleteRequest","delete"],"sources":["D:/A作业/JAVAexperiment/团队项目/bug_front_end_final/bug/src/utils/api.js"],"sourcesContent":["import axios from 'axios'\r\nimport {Message} from \"element-ui\";\r\nimport router from \"../router\";\r\n\r\n//请求拦截器 请求头中加入token\r\naxios.interceptors.request.use(config=>{\r\n  //如果存在token，请求携带这个token\r\n  let JToken =  sessionStorage.getItem(\"tokenStr\");\r\n  if(JToken){\r\n    //如果token有值  就在请求头信息里添加一个教J-TOKEN的值\r\n    config.headers['J-TOKEN'] = JToken;\r\n  }\r\n  return config;\r\n},error=>{\r\n  console.log(error);\r\n})\r\n\r\n//响应拦截器\r\naxios.interceptors.response.use(success=>{\r\n  if(success.status==200){\r\n    //Message.success({message: 'OK!'});\r\n  }\r\n  else if(success.status==201){\r\n    Message.success({message: 'Created!'});\r\n  }\r\n  return success.data;\r\n\r\n},error=>{\r\n  if(error.response.code==504||error.response.code==404){\r\n    Message.error({message: '服务器忙!'});\r\n  }else if(error.message.code==403){\r\n    Message.error({message: '权限不足，请联系管理员!'});\r\n  }else if(error.message.code==401){\r\n    Message.error({message: '尚未登录，请登录!'});\r\n    sessionStorage.removeItem('Authorization');\r\n    //跳转到登陆页面\r\n    router.replace('/login');\r\n  }else{\r\n      Message.error({message: '错误!'});\r\n  }\r\n  return;\r\n})\r\n\r\n// let base = `http://192.168.0.107:9090`;\r\n// let base = `http://192.168.205.231:9090`;\r\nlet base = `http://momoko46.azurewebsites.net`;\r\n//传送json格式的post请求\r\nexport const postRequest=(url,params)=>{\r\n  return axios.post(`${base}${url}`, params);\r\n}\r\n\r\n//传送json格式的get请求\r\nexport const getRequest=(url,params)=>{\r\n  return axios.get(`${base}${url}`, params);\r\n}\r\n\r\n//传送json格式的put请求\r\nexport const putRequest=(url,params)=>{\r\n  return axios.put(`${base}${url}`, params);\r\n}\r\n\r\n//传送json格式的delete请求\r\nexport const deleteRequest=(url,params)=>{\r\n  return axios.delete(`${base}${url}`, params);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAE;EACrC;EACA,IAAIC,MAAM,GAAIC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAd;;EACA,IAAGF,MAAH,EAAU;IACR;IACAD,MAAM,CAACI,OAAP,CAAe,SAAf,IAA4BH,MAA5B;EACD;;EACD,OAAOD,MAAP;AACD,CARD,EAQEK,KAAK,IAAE;EACPC,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,CAVD,E,CAYA;;AACAX,KAAK,CAACG,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CAAgCU,OAAO,IAAE;EACvC,IAAGA,OAAO,CAACC,MAAR,IAAgB,GAAnB,EAAuB,CACrB;EACD,CAFD,MAGK,IAAGD,OAAO,CAACC,MAAR,IAAgB,GAAnB,EAAuB;IAC1Bf,OAAO,CAACc,OAAR,CAAgB;MAACE,OAAO,EAAE;IAAV,CAAhB;EACD;;EACD,OAAOF,OAAO,CAACG,IAAf;AAED,CATD,EASEP,KAAK,IAAE;EACP,IAAGA,KAAK,CAACG,QAAN,CAAeK,IAAf,IAAqB,GAArB,IAA0BR,KAAK,CAACG,QAAN,CAAeK,IAAf,IAAqB,GAAlD,EAAsD;IACpDlB,OAAO,CAACU,KAAR,CAAc;MAACM,OAAO,EAAE;IAAV,CAAd;EACD,CAFD,MAEM,IAAGN,KAAK,CAACM,OAAN,CAAcE,IAAd,IAAoB,GAAvB,EAA2B;IAC/BlB,OAAO,CAACU,KAAR,CAAc;MAACM,OAAO,EAAE;IAAV,CAAd;EACD,CAFK,MAEA,IAAGN,KAAK,CAACM,OAAN,CAAcE,IAAd,IAAoB,GAAvB,EAA2B;IAC/BlB,OAAO,CAACU,KAAR,CAAc;MAACM,OAAO,EAAE;IAAV,CAAd;IACAT,cAAc,CAACY,UAAf,CAA0B,eAA1B,EAF+B,CAG/B;;IACAlB,MAAM,CAACmB,OAAP,CAAe,QAAf;EACD,CALK,MAKD;IACDpB,OAAO,CAACU,KAAR,CAAc;MAACM,OAAO,EAAE;IAAV,CAAd;EACH;;EACD;AACD,CAvBD,E,CAyBA;AACA;;AACA,IAAIK,IAAI,GAAI,mCAAZ,C,CACA;;AACA,OAAO,MAAMC,WAAW,GAAC,CAACC,GAAD,EAAKC,MAAL,KAAc;EACrC,OAAOzB,KAAK,CAAC0B,IAAN,CAAY,GAAEJ,IAAK,GAAEE,GAAI,EAAzB,EAA4BC,MAA5B,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAME,UAAU,GAAC,CAACH,GAAD,EAAKC,MAAL,KAAc;EACpC,OAAOzB,KAAK,CAAC4B,GAAN,CAAW,GAAEN,IAAK,GAAEE,GAAI,EAAxB,EAA2BC,MAA3B,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMI,UAAU,GAAC,CAACL,GAAD,EAAKC,MAAL,KAAc;EACpC,OAAOzB,KAAK,CAAC8B,GAAN,CAAW,GAAER,IAAK,GAAEE,GAAI,EAAxB,EAA2BC,MAA3B,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMM,aAAa,GAAC,CAACP,GAAD,EAAKC,MAAL,KAAc;EACvC,OAAOzB,KAAK,CAACgC,MAAN,CAAc,GAAEV,IAAK,GAAEE,GAAI,EAA3B,EAA8BC,MAA9B,CAAP;AACD,CAFM"},"metadata":{},"sourceType":"module"}