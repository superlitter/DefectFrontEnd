{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nconst echarts = require('echarts/lib/echarts');\n\nrequire('echarts/lib/component/grid');\n\nrequire('echarts/lib/chart/bar');\n\nexport default {\n  name: \"Bar.vue\",\n  props: ['chosenData', 'dataOfCheck', 'typeOfOptions'],\n\n  data() {\n    return {\n      typeName: []\n    };\n  },\n\n  // 初始化数据\n  created() {\n    let i, j; // 按照后端提供的i，相应地对应报表名称\n\n    for (i = 0; i < this.dataOfCheck.length; i++) {\n      for (j = 0; j < this.typeOfOptions.length; j++) {\n        if (this.dataOfCheck[i] == this.typeOfOptions[j].id) {\n          this.typeName.push(this.typeOfOptions[j].name);\n          break;\n        }\n      }\n    }\n  },\n\n  // 向后端发起请求，拿到数据后做一些业务处理\n  mounted() {\n    this.$nextTick(() => {\n      this.initEcharts();\n    });\n  },\n\n  methods: {\n    rowStyle() {\n      return 'text-align: center';\n    },\n\n    tableRowClassName({\n      row,\n      rowIndex\n    }) {\n      if (row.num > 15) {\n        return 'warning-row';\n      } else if (row.num < 8) {\n        return 'success-row';\n      }\n\n      return 'normal-row';\n    },\n\n    initEcharts() {\n      this.chosenData.forEach((val, index) => {\n        let i = 0;\n        let myChart = echarts.init(document.getElementById(`chart${index}`));\n        let option = {\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow'\n            }\n          },\n          title: {\n            text: this.typeName[index],\n            left: '50%',\n            textAlign: 'center'\n          },\n          grid: {\n            top: '10%',\n            left: '0%',\n            right: '5%',\n            bottom: '10%',\n            containLabel: true\n          },\n          xAxis: {\n            show: true,\n            axisLine: {\n              show: false // 轴线\n\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              formatter: '{value} 位',\n              show: false\n            },\n            splitLine: {\n              show: false\n            }\n          },\n          yAxis: {\n            type: 'category',\n            data: this.chosenData[index].arr.map(element => element.string),\n            axisLine: {\n              show: false // 轴线\n\n            },\n            axisTick: {\n              show: false // 刻度线\n\n            },\n            axisLabel: {\n              interval: 0\n            }\n          },\n          series: [{\n            label: {\n              show: true,\n              //开启显示\n              position: 'right',\n              //在右方显示\n              textStyle: {\n                //数值样式\n                color: 'black',\n                fontSize: 12\n              }\n            },\n            data: this.chosenData[index].arr.map(element => element.num),\n            type: 'bar',\n            itemStyle: {\n              color: function (params) {\n                // 定义一个颜色数组colorList\n                let colorList = ['#65B581', '#FFCE34', '#FD6999', '#ffff79', '#ffac27', '#ff4333'];\n\n                if (colorList[params.dataIndex] == null) {\n                  colorList.push(colorList[i]);\n                  i = (i + 1) % 6;\n                  return colorList[6];\n                }\n\n                return colorList[params.dataIndex];\n              }\n            }\n          }]\n        };\n        myChart.setOption(option);\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AACAA;;AACAA;;AAEA;EACAC,eADA;EAEAC,qDAFA;;EAGAC;IACA;MACAC;IADA;EAGA,CAPA;;EAQA;EACAC;IACA,SADA,CAEA;;IACA;MACA;QACA;UACA;UACA;QACA;MACA;IACA;EACA,CApBA;;EAqBA;EACAC;IACA;MACA;IACA,CAFA;EAGA,CA1BA;;EA2BAC;IACAC;MACA;IACA,CAHA;;IAIAC;MAAAC;MAAAC;IAAA;MACA;QACA;MACA,CAFA,MAGA;QACA;MACA;;MACA;IACA,CAZA;;IAaAC;MACA;QACA;QACA;QACA;UACAC;YACAC,eADA;YAEAC;cACAC;YADA;UAFA,CADA;UAOAC;YACAC,0BADA;YAEAC,WAFA;YAGAC;UAHA,CAPA;UAYAC;YACAC,UADA;YAEAH,UAFA;YAGAI,WAHA;YAIAC,aAJA;YAKAC;UALA,CAZA;UAmBAC;YACAC,UADA;YAEAC;cACAD,WADA,CACA;;YADA,CAFA;YAKAE;cACAF;YADA,CALA;YAQAG;cACAC,sBADA;cAEAJ;YAFA,CARA;YAYAK;cACAL;YADA;UAZA,CAnBA;UAmCAM;YACAjB,gBADA;YAEAb,+DAFA;YAGAyB;cACAD,WADA,CACA;;YADA,CAHA;YAMAE;cACAF,WADA,CACA;;YADA,CANA;YASAG;cACAI;YADA;UATA,CAnCA;UAgDAC,SACA;YACAC;cACAT,UADA;cACA;cACAU,iBAFA;cAEA;cACAC;gBAAA;gBACAC,cADA;gBAEAC;cAFA;YAHA,CADA;YASArC,4DATA;YAUAa,WAVA;YAWAyB;cACAF;gBACA;gBACA,iBACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,SALA,EAMA,SANA;;gBAQA;kBACAG;kBACAC;kBACA;gBACA;;gBACA;cACA;YAjBA;UAXA,CADA;QAhDA;QAkFAC;MACA,CAtFA;IAuFA;;EArGA;AA3BA","names":["require","name","props","data","typeName","created","mounted","methods","rowStyle","tableRowClassName","row","rowIndex","initEcharts","tooltip","trigger","axisPointer","type","title","text","left","textAlign","grid","top","right","bottom","containLabel","xAxis","show","axisLine","axisTick","axisLabel","formatter","splitLine","yAxis","interval","series","label","position","textStyle","color","fontSize","itemStyle","colorList","i","myChart"],"sourceRoot":"src/components","sources":["Bar.vue"],"sourcesContent":["<template>\r\n  <el-container>\r\n    <el-main>\r\n      <div v-for=\"(item,index) in chosenData\" :key=\"index\" class=\"floatFrame\">\r\n        <span class=\"s-1\" />\r\n        <span class=\"s-2\" />\r\n        <span class=\"s-3\" />\r\n        <span class=\"s-4\" />\r\n      <el-container>\r\n        <el-aside width=\"55%\">\r\n          <!--          item: 具体数值； index: 位置下标；  key：属性名-->\r\n            <div :id=\"`chart${index}`\" :style=\"{width: '400px', height: '600px',fontSize:'25px', margin:'40px 0px 0px 100px', left:'10px'}\"></div>\r\n        </el-aside>\r\n        <el-main width=\"45%\">\r\n            <el-table :data= chosenData[index].arr :cell-style=\"rowStyle\" style=\"width: 100%; top: 10px\" :header-cell-style=\"rowStyle\" :row-class-name=\"tableRowClassName\">\r\n              <el-table-column prop=\"string\" label=\"条目\" width=\"195\"></el-table-column>\r\n              <el-table-column prop=\"num\" label=\"值\" width=\"195\"></el-table-column>\r\n            </el-table>\r\n        </el-main>\r\n      </el-container>\r\n        <div :style=\"{margin:'60px 0px 0px 60px'}\"></div>\r\n      </div>\r\n    </el-main>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nconst echarts = require('echarts/lib/echarts');\r\nrequire('echarts/lib/component/grid');\r\nrequire('echarts/lib/chart/bar');\r\n\r\nexport default {\r\n  name: \"Bar.vue\",\r\n  props: ['chosenData','dataOfCheck', 'typeOfOptions'],\r\n  data(){\r\n    return {\r\n      typeName: []\r\n    }\r\n  },\r\n  // 初始化数据\r\n  created() {\r\n    let i, j;\r\n    // 按照后端提供的i，相应地对应报表名称\r\n    for(i=0;i<this.dataOfCheck.length;i++){\r\n      for(j=0;j<this.typeOfOptions.length;j++){\r\n        if(this.dataOfCheck[i] == this.typeOfOptions[j].id){\r\n          this.typeName.push(this.typeOfOptions[j].name);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  // 向后端发起请求，拿到数据后做一些业务处理\r\n  mounted () {\r\n    this.$nextTick(()=>{\r\n      this.initEcharts();\r\n    })\r\n  },\r\n  methods:{\r\n    rowStyle(){\r\n      return 'text-align: center';\r\n    },\r\n    tableRowClassName({row, rowIndex}) {\r\n      if (row.num > 15) {\r\n        return 'warning-row';\r\n      }\r\n      else if (row.num < 8) {\r\n        return 'success-row';\r\n      }\r\n      return 'normal-row';\r\n    },\r\n    initEcharts(){\r\n      this.chosenData.forEach((val,index) => {\r\n        let i = 0;\r\n        let myChart = echarts.init(document.getElementById(`chart${index}`));\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          },\r\n          title: {\r\n            text: this.typeName[index],\r\n            left: '50%',\r\n            textAlign: 'center'\r\n          },\r\n          grid: {\r\n            top: '10%',\r\n            left: '0%',\r\n            right: '5%',\r\n            bottom: '10%',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            show: true,\r\n            axisLine: {\r\n              show: false // 轴线\r\n            },\r\n            axisTick: {\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              formatter: '{value} 位',\r\n              show: false\r\n            },\r\n            splitLine: {\r\n              show: false\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: this.chosenData[index].arr.map(element => element.string),\r\n            axisLine: {\r\n              show: false // 轴线\r\n            },\r\n            axisTick: {\r\n              show: false // 刻度线\r\n            },\r\n            axisLabel: {\r\n              interval: 0\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              label: {\r\n                show: true, //开启显示\r\n                position: 'right', //在右方显示\r\n                textStyle: { //数值样式\r\n                  color: 'black',\r\n                  fontSize: 12\r\n                }\r\n              },\r\n              data: this.chosenData[index].arr.map(element => element.num),\r\n              type: 'bar',\r\n              itemStyle: {\r\n                color: function (params) {\r\n                  // 定义一个颜色数组colorList\r\n                  let colorList = [\r\n                    '#65B581',\r\n                    '#FFCE34',\r\n                    '#FD6999',\r\n                    '#ffff79',\r\n                    '#ffac27',\r\n                    '#ff4333'\r\n                  ];\r\n                  if(colorList[params.dataIndex] == null){\r\n                    colorList.push(colorList[i]);\r\n                    i = (i + 1) % 6;\r\n                    return colorList[6];\r\n                  }\r\n                  return colorList[params.dataIndex];\r\n                }\r\n              },\r\n            }\r\n          ]\r\n        }\r\n        myChart.setOption(option);\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n/deep/.el-table::before{\r\n  width: 85% !important;\r\n}\r\n\r\n/deep/.el-table .warning-row {\r\n  background: #fde6ef;\r\n}\r\n\r\n/deep/.el-table .success-row {\r\n  background: #f0f9eb;\r\n}\r\n\r\n/deep/.el-table .normal-row {\r\n  background: oldlace;\r\n}\r\n\r\n/deep/.el-card__body, .el-main{\r\n  padding: 10px;\r\n}\r\n\r\n.floatFrame {\r\n  overflow: hidden;\r\n  position: relative;\r\n  border: 1px solid rgba(11, 85, 140, 0.5);\r\n}\r\nspan {\r\n  position: absolute;\r\n  display: block;\r\n}\r\n.s-1 {\r\n  filter: hue-rotate(0deg);\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 3px;\r\n  background: linear-gradient(90deg, transparent, #3a86ff);\r\n  animation: animate1 4s linear infinite;\r\n}\r\n.s-2 {\r\n  filter: hue-rotate(60deg);\r\n  top: -100%;\r\n  right: 0;\r\n  width: 3px;\r\n  height: 100%;\r\n  background: linear-gradient(180deg, transparent, #3a86ff);\r\n  animation: animate2 4s linear infinite;\r\n  animation-delay: 1s;\r\n}\r\n.s-3 {\r\n  filter: hue-rotate(120deg);\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  background: linear-gradient(270deg, transparent, #3a86ff);\r\n  animation: animate3 4s linear infinite;\r\n  animation-delay: 2s;\r\n}\r\n.s-4 {\r\n  filter: hue-rotate(300deg);\r\n  bottom: -100%;\r\n  left: 0;\r\n  width: 3px;\r\n  height: 100%;\r\n  background: linear-gradient(360deg, transparent, #3a86ff);\r\n  animation: animate4 4s linear infinite;\r\n  animation-delay: 3s;\r\n}\r\n@keyframes animate1 {\r\n  0% {\r\n    left: -100%;\r\n  }\r\n  50%,\r\n  100% {\r\n    left: 100%;\r\n  }\r\n}\r\n@keyframes animate2 {\r\n  0% {\r\n    top: -100%;\r\n  }\r\n  50%,\r\n  100% {\r\n    top: 100%;\r\n  }\r\n}\r\n@keyframes animate3 {\r\n  0% {\r\n    right: -100%;\r\n    height: 3px;\r\n  }\r\n  50%,\r\n  100% {\r\n    height: 2px;\r\n    right: 100%;\r\n  }\r\n}\r\n@keyframes animate4 {\r\n  0% {\r\n    bottom: -100%;\r\n  }\r\n  50%,\r\n  100% {\r\n    bottom: 100%;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}